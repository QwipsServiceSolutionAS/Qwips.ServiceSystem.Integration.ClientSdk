// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.Integration.ClientSdk.Models {
    public class ApiErrorResponse : ApiException, IParsable {
        /// <summary>The AdditionalParameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Qwips.Integration.ClientSdk.Models.AdditionalParameters? AdditionalParameters { get; set; }
#nullable restore
#else
        public Qwips.Integration.ClientSdk.Models.AdditionalParameters AdditionalParameters { get; set; }
#endif
        /// <summary>The Errors property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Errors { get; set; }
#nullable restore
#else
        public List<string> Errors { get; set; }
#endif
        /// <summary>The ExceptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExceptionId { get; set; }
#nullable restore
#else
        public string ExceptionId { get; set; }
#endif
        /// <summary>The InnerException property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InnerExceptionEscaped { get; set; }
#nullable restore
#else
        public string InnerExceptionEscaped { get; set; }
#endif
        /// <summary>The Message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageEscaped { get; set; }
#nullable restore
#else
        public string MessageEscaped { get; set; }
#endif
        /// <summary>The ReasonCode property</summary>
        public int? ReasonCode { get; set; }
        /// <summary>The StatusCode property</summary>
        public int? StatusCode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiErrorResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiErrorResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AdditionalParameters", n => { AdditionalParameters = n.GetObjectValue<Qwips.Integration.ClientSdk.Models.AdditionalParameters>(Qwips.Integration.ClientSdk.Models.AdditionalParameters.CreateFromDiscriminatorValue); } },
                {"Errors", n => { Errors = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"ExceptionId", n => { ExceptionId = n.GetStringValue(); } },
                {"InnerException", n => { InnerExceptionEscaped = n.GetStringValue(); } },
                {"Message", n => { MessageEscaped = n.GetStringValue(); } },
                {"ReasonCode", n => { ReasonCode = n.GetIntValue(); } },
                {"StatusCode", n => { StatusCode = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Qwips.Integration.ClientSdk.Models.AdditionalParameters>("AdditionalParameters", AdditionalParameters);
            writer.WriteCollectionOfPrimitiveValues<string>("Errors", Errors);
            writer.WriteStringValue("ExceptionId", ExceptionId);
            writer.WriteStringValue("InnerException", InnerExceptionEscaped);
            writer.WriteStringValue("Message", MessageEscaped);
            writer.WriteIntValue("ReasonCode", ReasonCode);
            writer.WriteIntValue("StatusCode", StatusCode);
        }
    }
}
